package tcpandudpChat;

import assignment1.Server.ClientThread;
import java.util.StringTokenizer;


public class ChatFrame extends javax.swing.JFrame {

    /**
     * Creates new form ChatFrame
     */
    private Server server;
    private Client client;
    private boolean connected;

    // UDP
    public static final String HOST_NAME = "localhost";
    public static final int HOST_PORT = 8889; // host port number
    private String receivedList;

    public ChatFrame() {
        initComponents();
        server = null;
        client = null;
        connected = false;
        DisconnectButton.setEnabled(false);
        jTextArea1.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        UserField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        AddressField = new javax.swing.JTextField();
        PortField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        MesssageField = new javax.swing.JTextField();
        CreateButton = new javax.swing.JButton();
        ConnectButton = new javax.swing.JButton();
        DisconnectButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<String>();
        SendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Username:");

        UserField.setText("Matthew");

        jLabel2.setText("Address:");

        AddressField.setText("localhost");

        PortField.setText("1500");

        jLabel3.setText("Port Number:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        MesssageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MesssageFieldActionPerformed(evt);
            }
        });

        CreateButton.setText("Start");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        ConnectButton.setText("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        DisconnectButton.setText("Disconnect");
        DisconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectButtonActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UserField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(PortField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(MesssageField, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DisconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ConnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CreateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CreateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ConnectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DisconnectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MesssageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SendButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        // Connection request
        String username = UserField.getText().trim();
        // empty username ignore it
        if (username.length() == 0) {
            return;
        }
        // Ignore empty serverAddress
        String server = AddressField.getText().trim();
        if (server.length() == 0) {
            return;
        }
        // Ignore empty or invalid port number
        String portNumber = PortField.getText().trim();
        if (portNumber.length() == 0) {
            return;
        }
        int port = 0;
        try {
            port = Integer.parseInt(portNumber);
        } catch (Exception en) {
            return;
        }

        // Try creating a new Client with GUI
        client = new Client(server, port, username, this);
        // Test the Client
        if (!client.start()) {
            return;
        }
        connected = true;
        client.sendMessage(new RegisterMessage(client));
        CreateButton.setEnabled(false);
        ConnectButton.setEnabled(false);
        UserField.setEnabled(false);
        AddressField.setEnabled(false);
        PortField.setEnabled(false);
        DisconnectButton.setEnabled(true);
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void DisconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectButtonActionPerformed
        client.sendMessage(new DisconnectMessage(client));
        connected = false;
        CreateButton.setEnabled(true);
        ConnectButton.setEnabled(true);
        UserField.setEnabled(true);
        AddressField.setEnabled(true);
        PortField.setEnabled(true);
        DisconnectButton.setEnabled(false);
        return;
    }//GEN-LAST:event_DisconnectButtonActionPerformed

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        SendMessage();
    }//GEN-LAST:event_SendButtonActionPerformed

    private void MesssageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MesssageFieldActionPerformed
        SendMessage();
    }//GEN-LAST:event_MesssageFieldActionPerformed

    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        // If the server is running it must be stopped
        if (CreateButton.getText().equals("Start")) {
            // Start the server
            int port;
            try {
                port = Integer.parseInt(PortField.getText().trim());
            } catch (Exception e) {
                return;
            }
            // Create a new Server
            server = new Server(port, this);
            // Start it as a thread
            new ServerRunning().start();
            CreateButton.setText("Stop");
        }
        else if (CreateButton.getText().equals("Stop")) {
            if (server != null) {
                server.stop();
                server = null;
                CreateButton.setText("Start");
                return;
            } else {
                CreateButton.setText("Start");
            }
        }
    }//GEN-LAST:event_CreateButtonActionPerformed

        private void SendMessage() {
        ClientThread toCl = null;

        if (connected) {
            String fullMessage = MesssageField.getText();
            // If its a private message to a client
//            if (fullMessage.startsWith("@")) {
//                StringTokenizer token = new StringTokenizer(fullMessage, "@ ");
//                String recipient = token.nextToken();
//                // Check if that client is in the room
//                for (int i = 0; i < al.size(); i++) {
//                    if (recipient.equals(al.get(i).username)) {
//                        toCl = al.get(i);
//                        String privateMsg = "";
//                        while (token.hasMoreTokens()) {
//                            privateMsg += token.nextToken() + " ";
//                        }
//                        String priResult = "<" + recipient + "> " + privateMsg;
//                        client.sendMessage(new MessageTo(priResult, toCl));
//                    } else {
//                    }
//                }
//                System.out.println(priResult);
//            } else {
//                // Broadcast Message
//                client.sendMessage(new BroadcastMessage(MesssageField.getText()));
//            }
            client.sendMessage(new BroadcastMessage(MesssageField.getText()));
            // just have to send the message
            MesssageField.setText("");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddressField;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JButton CreateButton;
    private javax.swing.JButton DisconnectButton;
    private javax.swing.JTextField MesssageField;
    private javax.swing.JTextField PortField;
    private javax.swing.JButton SendButton;
    private javax.swing.JTextField UserField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    void append(String string) {
        jTextArea1.append(string);
        jTextArea1.setCaretPosition(jTextArea1.getText().length() - 1);
    }

    void connectionFailed() {
        server = null;
        client = null;
        CreateButton.setEnabled(true);
        ConnectButton.setEnabled(true);
        UserField.setEnabled(true);
        AddressField.setEnabled(true);
        PortField.setEnabled(true);
        DisconnectButton.setEnabled(false);
    }

    void updateList(String[] listData) {
        jList1.clearSelection();
        jList1.setListData(listData);
        jList1.validate();
    }

    class ServerRunning extends Thread {

        public void run() {
            server.start();
            // should execute until if fails
            // the server failed
            server = null;
        }
    }
}
